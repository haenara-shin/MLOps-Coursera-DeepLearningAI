WEBVTT

1
00:00:00.000 --> 00:00:02.340
Now, let's take a look at using

2
00:00:02.340 --> 00:00:05.400
ML Metadata with
a coding example.

3
00:00:05.400 --> 00:00:08.954
Besides data lineage and
provenance tracking,

4
00:00:08.954 --> 00:00:13.105
you get several other
benefits through ML Metadata.

5
00:00:13.105 --> 00:00:15.435
This includes the
ability to construct

6
00:00:15.435 --> 00:00:18.075
a directed acyclic graph or DAG,

7
00:00:18.075 --> 00:00:21.690
of the component executions
occurring in a pipeline,

8
00:00:21.690 --> 00:00:25.110
which can be useful for
debugging purposes.

9
00:00:25.110 --> 00:00:26.820
Through this, you can verify

10
00:00:26.820 --> 00:00:29.880
which inputs have been
used in an execution.

11
00:00:29.880 --> 00:00:33.300
You can also summarize all
the artifacts belonging to

12
00:00:33.300 --> 00:00:37.845
a specific type generated
after a series of experiments.

13
00:00:37.845 --> 00:00:39.690
For example, you can list

14
00:00:39.690 --> 00:00:41.830
all of the models that
have been trained.

15
00:00:41.830 --> 00:00:43.700
You can then compare them to

16
00:00:43.700 --> 00:00:46.700
evaluate your various
training runs.

17
00:00:46.700 --> 00:00:50.465
Now, let's get started with
writing code for ML Metadata.

18
00:00:50.465 --> 00:00:52.790
You may have to
install ML Metadata,

19
00:00:52.790 --> 00:00:56.165
which you can do using
PIP as shown here.

20
00:00:56.165 --> 00:00:58.520
Then there are two imports

21
00:00:58.520 --> 00:01:01.114
from ML Metadata which
are used frequently,

22
00:01:01.114 --> 00:01:02.510
the ML Metadata store

23
00:01:02.510 --> 00:01:06.455
itself and the ML
Metadata store PB2,

24
00:01:06.455 --> 00:01:10.090
which is a protocol
buffer or protobuf.

25
00:01:10.090 --> 00:01:13.815
Start by setting up
the storage backend.

26
00:01:13.815 --> 00:01:17.060
ML Metadata store is
the database where

27
00:01:17.060 --> 00:01:19.250
ML Metadata registers all of

28
00:01:19.250 --> 00:01:22.310
the metadata associated
with your project.

29
00:01:22.310 --> 00:01:25.670
ML Metadata provides
APIs to connect with

30
00:01:25.670 --> 00:01:32.505
a fake database for quick
prototyping, SQLite and MySQL.

31
00:01:32.505 --> 00:01:36.109
We also need a block
store or file system

32
00:01:36.109 --> 00:01:40.340
where ML Metadata stores
large objects like datasets.

33
00:01:40.340 --> 00:01:44.005
Let's quickly explore
the first three options.

34
00:01:44.005 --> 00:01:46.294
For any storage backend,

35
00:01:46.294 --> 00:01:47.720
you'll need to create

36
00:01:47.720 --> 00:01:50.045
a connection config object

37
00:01:50.045 --> 00:01:53.860
using the metadata
store PB2 protobuf.

38
00:01:53.860 --> 00:01:57.455
Then, based on your choice
of storage backend,

39
00:01:57.455 --> 00:02:00.010
you need to configure
this connection object.

40
00:02:00.010 --> 00:02:01.980
Here you're signaling that

41
00:02:01.980 --> 00:02:04.610
your fake database is in parent,

42
00:02:04.610 --> 00:02:06.560
which is the primary memory

43
00:02:06.560 --> 00:02:08.690
of the system on
which it's running.

44
00:02:08.690 --> 00:02:11.690
Finally, you create
the store object

45
00:02:11.690 --> 00:02:14.350
passing in the connection config.

46
00:02:14.350 --> 00:02:18.374
Regardless of what storage
or database you use,

47
00:02:18.374 --> 00:02:20.030
the store object is

48
00:02:20.030 --> 00:02:24.010
a key part of how you
interact with ML Metadata.

49
00:02:24.010 --> 00:02:26.540
To use SQLite, you start

50
00:02:26.540 --> 00:02:29.095
by creating a
connection config again

51
00:02:29.095 --> 00:02:31.700
then you configure
the connection config

52
00:02:31.700 --> 00:02:34.925
object with the location
of your SQLite file.

53
00:02:34.925 --> 00:02:38.180
Make sure to provide that
with the relevant read and

54
00:02:38.180 --> 00:02:41.690
write permissions based
on your application.

55
00:02:41.690 --> 00:02:44.345
Finally, you create
the store object

56
00:02:44.345 --> 00:02:47.165
passing in the connection config.

57
00:02:47.165 --> 00:02:51.005
As you might imagine, using
MySQL is very similar,

58
00:02:51.005 --> 00:02:54.295
you start by creating
a connection config.

59
00:02:54.295 --> 00:02:57.590
Your connection config
object should be configured

60
00:02:57.590 --> 00:03:01.025
with the relevant host
name, the port number,

61
00:03:01.025 --> 00:03:03.590
the database location, username,

62
00:03:03.590 --> 00:03:07.760
and password of your
MySQL database user

63
00:03:07.760 --> 00:03:09.725
and that's shown here.

64
00:03:09.725 --> 00:03:12.485
Finally, you create
the store object

65
00:03:12.485 --> 00:03:15.550
passing in the connection config.

66
00:03:15.550 --> 00:03:18.350
Now, that the storage
backend is configured,

67
00:03:18.350 --> 00:03:22.280
it's time to use ML Metadata
to solve a problem.

68
00:03:22.280 --> 00:03:26.555
Let's go over a
workflow using TFTV.

69
00:03:26.555 --> 00:03:30.350
We're going to use that in
conjunction with ML Metadata.

70
00:03:30.350 --> 00:03:32.480
The choice here is

71
00:03:32.480 --> 00:03:36.425
a tabular dataset
containing many features.

72
00:03:36.425 --> 00:03:39.620
In the lab, ML
Metadata is explicitly

73
00:03:39.620 --> 00:03:43.820
programmed because in a
full-fledged ML Pipeline,

74
00:03:43.820 --> 00:03:46.160
ML Metadata is intrinsically

75
00:03:46.160 --> 00:03:48.740
capable enough to
understand the flow of

76
00:03:48.740 --> 00:03:51.575
data between various components

77
00:03:51.575 --> 00:03:54.485
and perform its necessary duties.

78
00:03:54.485 --> 00:03:57.514
To help you better
understand ML Metadata,

79
00:03:57.514 --> 00:04:00.860
you'll be using it
outside of a pipeline.

80
00:04:00.860 --> 00:04:03.380
The lab also shows

81
00:04:03.380 --> 00:04:05.630
ML Metadata integration with

82
00:04:05.630 --> 00:04:09.320
TensorFlow Data
Validation or TFTP.

83
00:04:09.320 --> 00:04:11.210
By the end of the lab,

84
00:04:11.210 --> 00:04:12.890
you should have some intuition

85
00:04:12.890 --> 00:04:15.980
about how ML Metadata
can keep track of

86
00:04:15.980 --> 00:04:18.335
progress and how you can use

87
00:04:18.335 --> 00:04:23.060
ML Metadata to track your
training process and pipeline.

88
00:04:23.060 --> 00:04:25.460
Let's review the key points

89
00:04:25.460 --> 00:04:27.640
which we covered in this lesson.

90
00:04:27.640 --> 00:04:32.270
First, you learned about data
lineage and provenance to

91
00:04:32.270 --> 00:04:36.995
address data evolution over
the ML Pipeline lifecycle.

92
00:04:36.995 --> 00:04:39.139
Then you went over metadata

93
00:04:39.139 --> 00:04:41.590
for tracking those data changes.

94
00:04:41.590 --> 00:04:44.195
Then you inspected
the architecture

95
00:04:44.195 --> 00:04:46.775
of the ML Metadata library.

96
00:04:46.775 --> 00:04:49.385
Finally, in the ungraded lab,

97
00:04:49.385 --> 00:04:51.470
you read an example to register

98
00:04:51.470 --> 00:04:55.920
artifacts, executions,
and contexts.